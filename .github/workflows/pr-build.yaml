name: PR build

on:
  pull_request:
    branches:
      - master
      - replica-master

jobs:
  validate:
    runs-on: ubuntu-24.04  # Ensure this self-hosted runner exists

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Install Docker
      #   run: |
      #     curl -fsSL https://get.docker.com -o get-docker.sh
      #     sudo sh get-docker.sh

      # - name: Start Docker with vfs storage driver
      #   run: |
      #     echo 'Stopping any existing Docker...'
      #     sudo systemctl stop docker || true
      #     sudo killall dockerd || true

      #     echo 'Writing vfs storage driver configuration...'
      #     echo '{"storage-driver":"vfs"}' | sudo tee /etc/docker/daemon.json > /dev/null

      #     echo 'Starting Docker manually (no conflicting flags)...'
      #     sudo dockerd > /tmp/dockerd.log 2>&1 &

      #     echo 'Waiting for Docker to become ready...'
      #     for i in {1..10}; do
      #       if docker info > /dev/null 2>&1; then
      #         echo "Docker is up"
      #         break
      #       fi
      #       sleep 3
      #     done

      #     if ! docker info > /dev/null 2>&1; then
      #       echo "Docker failed to start. Dumping logs:"
      #       cat /tmp/dockerd.log
      #       exit 1
      #     fi

      # - name: Pull UBI9 Docker Image
      #   run: |
      #     docker pull registry.access.redhat.com/ubi9/ubi:9.3

      - name: Install required packages
        run: |
          sudo apt update -y
          sudo apt-get install -y file

      - name: Install Python dependencies
        run: |
          pip3 install --force-reinstall -v "requests==2.31.0"
          pip3 install --upgrade docker

      - name: Set PR number
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Run validate_builds.py script and monitor log size
        run: |
          python3 script/validate_builds.py ${PR_NUMBER:-false} > build_log &
          SCRIPT_PID=$!
          while ps -p $SCRIPT_PID > /dev/null; do
            echo "$SCRIPT_PID is running"
            sleep 300
          done
          wait $SCRIPT_PID
          my_pid_status=$?
          build_size=$(stat -c %s build_log)
          if [ "$build_size" -lt 1800000 ]; then
            cat build_log
          else
            echo "xxxxxxxxxxxxxxx Build log size too large, so printing last 1.7MB xxxxxxxxxxxxxxx"
            tail -c 1700000 build_log
          fi
          exit $my_pid_status
